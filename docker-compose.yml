services:
  postgres:
    image: postgres:15
    container_name: dagster_postgres
    environment:
      POSTGRES_USER: dagster
      POSTGRES_PASSWORD: dagster
      POSTGRES_DB: dagster
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dagster"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - dagster_network

  # Dagster webserver for local development
  # Uses lightweight local stage without nginx/auth proxy
  dagster-webserver:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: local
    container_name: dagster_webserver
    ports:
      - "3000:3000"
    environment:
      DAGSTER_POSTGRES_USER: dagster
      DAGSTER_POSTGRES_PASSWORD: dagster
      DAGSTER_POSTGRES_DB: dagster
      DAGSTER_POSTGRES_HOST: postgres
      DAGSTER_POSTGRES_PORT: 5432
      DAGSTER_HOME: /app/.dagster_home
      DAGSTER_S3_BUCKET: ${DAGSTER_S3_BUCKET:-}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-local}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-local}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION:-ap-southeast-2}
    volumes:
      - ./docker/dagster-local.yaml:/app/.dagster_home/dagster.yaml
      - ./.dagster_home:/app/.dagster_home
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - dagster_network

  # Dagster daemon for schedules, sensors, and run queue
  # Uses local stage for consistency with webserver
  dagster-daemon:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: local
    container_name: dagster_daemon
    command: ["dagster-daemon", "run"]
    environment:
      DAGSTER_POSTGRES_USER: dagster
      DAGSTER_POSTGRES_PASSWORD: dagster
      DAGSTER_POSTGRES_DB: dagster
      DAGSTER_POSTGRES_HOST: postgres
      DAGSTER_POSTGRES_PORT: 5432
      DAGSTER_HOME: /app/.dagster_home
      DAGSTER_S3_BUCKET: ${DAGSTER_S3_BUCKET:-}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-local}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-local}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION:-ap-southeast-2}
    volumes:
      - ./docker/dagster-local.yaml:/app/.dagster_home/dagster.yaml
      - ./.dagster_home:/app/.dagster_home
    depends_on:
      postgres:
        condition: service_healthy
      dagster-webserver:
        condition: service_started
    restart: unless-stopped
    networks:
      - dagster_network

volumes:
  postgres_data:

networks:
  dagster_network:
    driver: bridge