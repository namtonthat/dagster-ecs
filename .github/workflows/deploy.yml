name: Deploy to AWS ECS

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_REGION: ap-southeast-2
  ECR_REPOSITORY: dagster-ecs
  ECS_SERVICE: dagster-ecs-fargate-service
  ECS_CLUSTER: dagster-ecs-fargate-cluster

jobs:
  test:
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Configure AWS credentials for OpenTofu
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install the latest version of `uv`
        uses: astral-sh/setup-uv@v5

      - name: Install dependencies
        run: uv sync

      - name: Install `opentofu`
        uses: opentofu/setup-opentofu@v1

      - name: Initialize OpenTofu
        run: |
          cd infrastructure
          tofu init -backend-config=backend.hcl

      - name: Run tests
        run: |
          python -m pytest dags/ --verbose || echo "No tests found, skipping"

      - name: Run linting and type checking
        run: |
          make test

      - name: Validate AWS credentials output format
        run: |
          # Test that aws-credentials command outputs exactly 2 lines
          cd infrastructure
          OUTPUT_LINES=$(tofu output -raw aws_access_key_id; echo; tofu output -raw aws_secret_access_key; echo | wc -l)
          if [ "$OUTPUT_LINES" -ne 2 ]; then
            echo "❌ FAIL: Expected 2 lines of AWS credentials output, got $OUTPUT_LINES"
            exit 1
          fi
          echo "✅ PASS: AWS credentials output format validated"

      - name: Verify DDoS protection configuration
        run: |
          # Assert max scaling is limited to 2 instances to prevent DDoS scaling
          MAX_CAPACITY=$(grep -A 3 "max_capacity" infrastructure/ecs_fargate.tf | grep "max_capacity" | awk '{print $3}')
          if [ "$MAX_CAPACITY" -ne 2 ]; then
            echo "❌ FAIL: Max capacity should be 2 for DDoS protection, found $MAX_CAPACITY"
            exit 1
          fi
          echo "✅ PASS: DDoS protection verified - max scaling limited to 2 instances"

  infrastructure:
    needs: test
    runs-on: ubuntu-24.04-arm
    if: github.ref == 'refs/heads/main'
    outputs:
      changed: ${{ steps.check-infra.outputs.changed }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history to check for changes

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install OpenTofu
        uses: opentofu/setup-opentofu@v1

      - name: Check for infrastructure changes
        id: check-infra
        run: |
          # Check if infrastructure files changed in this commit
          INFRA_CHANGED="false"
          if git diff --name-only HEAD^ HEAD | grep -E "^infrastructure/.*\.(tf|tfvars|hcl)$"; then
            echo "Infrastructure files changed"
            INFRA_CHANGED="true"
          else
            echo "No infrastructure changes detected"
          fi
          echo "changed=$INFRA_CHANGED" >> $GITHUB_OUTPUT

      - name: Initialize OpenTofu
        if: steps.check-infra.outputs.changed == 'true'
        run: |
          cd infrastructure
          tofu init -backend-config=backend.hcl

      - name: Validate OpenTofu configuration
        if: steps.check-infra.outputs.changed == 'true'
        run: |
          cd infrastructure
          tofu validate

      - name: Plan infrastructure changes
        if: steps.check-infra.outputs.changed == 'true'
        run: |
          cd infrastructure
          tofu plan -out=tfplan
          tofu show -no-color tfplan > plan.txt
          
          # Show summary of changes
          echo "📋 Infrastructure Plan Summary:"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          if grep -q "No changes" plan.txt; then
            echo "✅ No infrastructure changes needed"
          else
            echo "Changes detected:"
            grep -E "^  [+-~]" plan.txt || true
          fi

      - name: Apply infrastructure changes
        if: steps.check-infra.outputs.changed == 'true'
        run: |
          cd infrastructure
          tofu apply -auto-approve tfplan
          
          # Output key infrastructure details
          echo "📊 Infrastructure Outputs:"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "EFS ID: $(tofu output -raw efs_file_system_id 2>/dev/null || echo 'N/A')"
          echo "ECR URL: $(tofu output -raw ecr_repository_url)"
          echo "ECS Cluster: $(tofu output -raw ecs_cluster_name)"

  build-and-deploy:
    needs: [test, infrastructure]
    runs-on: ubuntu-24.04-arm
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Check if image needs to be rebuilt
        id: check-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Check if image with current commit SHA already exists in ECR
          IMAGE_CHANGED="true"
          if docker manifest inspect $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG > /dev/null 2>&1; then
            echo "Image with tag $IMAGE_TAG already exists in ECR"
            IMAGE_CHANGED="false"
          else
            echo "Image with tag $IMAGE_TAG does not exist in ECR - rebuild needed"
          fi
          echo "changed=$IMAGE_CHANGED" >> $GITHUB_OUTPUT

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        if: steps.check-image.outputs.changed == 'true'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Check if latest image exists in ECR for cache
          CACHE_FROM_ARG=""
          if docker manifest inspect $ECR_REGISTRY/$ECR_REPOSITORY:latest > /dev/null 2>&1; then
            echo "Found existing image in ECR, using as cache source"
            docker pull --platform linux/arm64 $ECR_REGISTRY/$ECR_REPOSITORY:latest
            CACHE_FROM_ARG="--cache-from $ECR_REGISTRY/$ECR_REPOSITORY:latest"
          else
            echo "No existing image found in ECR, building without cache"
          fi

          # Build with cache if available
          docker build --platform linux/arm64 --target production -f docker/Dockerfile $CACHE_FROM_ARG -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Deploy DAGs to S3
        run: |
          # Deploy DAGs regardless of image changes
          ./scripts/deploy-dags.sh

      - name: Deploy to Amazon ECS
        if: steps.check-image.outputs.changed == 'true' || needs.infrastructure.outputs.changed == 'true'
        run: |
          # Force new deployment if either image or infrastructure changed
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --force-new-deployment
          
          # Also update daemon service
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service dagster-ecs-daemon-service \
            --force-new-deployment || echo "Daemon service update skipped"
