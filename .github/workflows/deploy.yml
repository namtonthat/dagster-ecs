name: Deploy to AWS ECS

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_REGION: ap-southeast-2
  ECR_REPOSITORY: dagster-ecs
  ECS_SERVICE: dagster-ecs-fargate-service
  ECS_CLUSTER: dagster-ecs-fargate-cluster

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Configure AWS credentials for OpenTofu
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install the latest version of `uv`
        uses: astral-sh/setup-uv@v5

      - name: Install dependencies
        run: uv sync

      - name: Install `opentofu`
        uses: opentofu/setup-opentofu@v1

      - name: Initialize OpenTofu
        run: |
          cd infrastructure
          tofu init -backend-config=backend.hcl

      - name: Run tests
        run: |
          python -m pytest dags/ --verbose || echo "No tests found, skipping"

      - name: Run linting and type checking
        run: |
          uv run ruff check dags/
          uv run ruff format --check dags/
          uv run ty check dags/

      - name: Validate AWS credentials output format
        run: |
          # Test that aws-credentials command outputs exactly 2 lines
          cd infrastructure
          OUTPUT_LINES=$(tofu output -raw aws_access_key_id; echo; tofu output -raw aws_secret_access_key; echo | wc -l)
          if [ "$OUTPUT_LINES" -ne 2 ]; then
            echo "❌ FAIL: Expected 2 lines of AWS credentials output, got $OUTPUT_LINES"
            exit 1
          fi
          echo "✅ PASS: AWS credentials output format validated"

      - name: Verify DDoS protection configuration
        run: |
          # Assert max scaling is limited to 2 instances to prevent DDoS scaling
          MAX_CAPACITY=$(grep -A 3 "max_capacity" infrastructure/ecs_fargate.tf | grep "max_capacity" | awk '{print $3}')
          if [ "$MAX_CAPACITY" -ne 2 ]; then
            echo "❌ FAIL: Max capacity should be 2 for DDoS protection, found $MAX_CAPACITY"
            exit 1
          fi
          echo "✅ PASS: DDoS protection verified - max scaling limited to 2 instances"

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build --target production -f docker/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Deploy to Amazon ECS
        run: |
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --force-new-deployment

      - name: Wait for deployment
        run: |
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE

      - name: Update README with live Dagster URL
        run: |
          # Install OpenTofu for URL retrieval
          curl -fsSL https://get.opentofu.org/install-opentofu.sh | sh
          sudo mv tofu /usr/local/bin/

          # Initialize and get current Dagster URL
          cd infrastructure
          tofu init -backend-config=backend.hcl
          DAGSTER_URL=$(tofu output -raw load_balancer_url)
          cd ..

          # Update README.md with current URL (both localhost and production references)
          sed -i "s|Open <http://localhost:3000>|Open <$DAGSTER_URL>|g" README.md
          sed -i "s|http://localhost:3000|$DAGSTER_URL|g" README.md

          # Commit changes if URL changed
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          if git diff --staged --quiet; then
            echo "No changes to README.md"
          else
            git commit -m "docs: update live Dagster URL to $DAGSTER_URL [skip ci]"
            git push
            echo "✅ README.md updated with live URL: $DAGSTER_URL"
          fi
